using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using System.Data.Entity;
using QuanlyCuocDT.Dao;
using QuanlyCuocDT.Model;

namespace QuanlyCuocDT
{
    public partial class QuanlyHDDangki : DevExpress.XtraEditors.XtraUserControl
    {
        QLCuocDTContext db = new QLCuocDTContext();
        public QuanlyHDDangki()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            QuanlyCuocDT.Model.QLCuocDTContext dbContext = new QuanlyCuocDT.Model.QLCuocDTContext();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.HoaDonDangKies.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                gridControl1.DataSource = dbContext.HoaDonDangKies.Where(p => p.Flag == true).ToList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
            setcombo();
        }

        public void load()
        {
            QuanlyCuocDT.Model.QLCuocDTContext dbContext = new QuanlyCuocDT.Model.QLCuocDTContext();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.HoaDonDangKies.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                gridControl1.DataSource = dbContext.HoaDonDangKies.Where(p => p.Flag == true).ToList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
        }

        public void setcombo()
        {
            HDDKDao a = new HDDKDao();
            var b = a.load();
            foreach(var i in b)
            {
                cboIDSIM.Properties.Items.Add(i.IDSIM);
            }
        }
        private void gridControl1_Click(object sender, EventArgs e)
        {
            txtMahddk.Text = gridView1.GetFocusedRowCellValue(colMaHDDK).ToString();
            txtchiphithanhtoan.Text = gridView1.GetFocusedRowCellValue(colChiPhiDangKy).ToString();
            cboIDSIM.Text= gridView1.GetFocusedRowCellValue(colIDSIM).ToString();
        }

        private void btnLuu_Click(object sender, EventArgs e)
        {
            HDDKDao a = new HDDKDao();
            a.suahddk(txtMahddk.Text, cboIDSIM.Text);
            XtraMessageBox.Show("Sửa thành công");
        }

        private void btnUpdate_Click(object sender, EventArgs e)
        {
            load();
        }

        private void btnXoa_Click(object sender, EventArgs e)
        {
            DialogResult dialogResult = XtraMessageBox.Show("Xác nhận", "Bạn thực sự muốn xóa?", MessageBoxButtons.YesNo);
            if (dialogResult == DialogResult.Yes)
            {
                string dongdangchon = gridView1.GetFocusedRowCellValue(colMaHDDK).ToString();
                if (dongdangchon == null)
                {
                    XtraMessageBox.Show("Bạn chưa chọn dòng!!");
                }
                else
                {
                    var kh = db.HoaDonDangKies.Find(dongdangchon);
                    kh.Flag = false;
                    db.SaveChanges();
                    XtraMessageBox.Show("Đã xóa thành công!!");
                    load();
                }
            }
        }

        private void btnThemNV_Click(object sender, EventArgs e)
        {
            ThemHDDK f = new ThemHDDK();
            f.ShowDialog();
        }
    }
}
